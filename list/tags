	int_list.vim	/^inoremap  u$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
,es	int_list.vim	/^map ,es :e ~\/.vimrc$/;"	m
,ss	int_list.vim	/^map ,ss :source ~\/.vimrc$/;"	m
<Plug>NetrwBrowseX	int_list.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
Coefficent	void_list.c	/^	int Coefficent;$/;"	m	struct:OneCore	file:
CursorAlloc	list_cursor.c	/^static Position CursorAlloc( void )$/;"	f	file:
CursorFree	list_cursor.c	/^static void CursorFree( Position P )$/;"	f	file:
CursorSpace	list_cursor.h	/^struct Node CursorSpace[ 256 ];$/;"	v	typeref:struct:Node
Data	void_list.h	/^struct Data$/;"	s
Delete	int_list.c	/^void Delete(int x,List l)$/;"	f
Delete	void_list.c	/^void Delete(void* elem,List l)$/;"	f
DeleteList	int_list.c	/^void DeleteList(List l)$/;"	f
DeleteList	void_list.c	/^void DeleteList(List l)$/;"	f
Element	list_cursor.h	/^	int Element;$/;"	m	struct:Node
Exponent	void_list.c	/^	int Exponent;$/;"	m	struct:OneCore	file:
Find	int_list.c	/^Position Find(int x,List l)$/;"	f
Find	void_list.c	/^Position Find(void* elem,List l)$/;"	f
FindPrevious	int_list.c	/^Position FindPrevious(int x,List l)$/;"	f
FindPrevious	void_list.c	/^Position FindPrevious(void* elem,List l)$/;"	f
GetAt	void_list.c	/^void GetAt(List l,Position p,void* pDest)$/;"	f
INT_LIST_H	int_list.h	2;"	d
Insert	int_list.c	/^void Insert(int x,List l,Position p)$/;"	f
Insert	void_list.c	/^void Insert(void* elem,List l,Position p)$/;"	f
IsEmpty	int_list.c	/^int IsEmpty(List l)$/;"	f
IsEmpty	void_list.c	/^int IsEmpty(List l)$/;"	f
IsLast	int_list.c	/^int IsLast(Position p,List l)$/;"	f
IsLast	void_list.c	/^int IsLast(Position p,List l)$/;"	f
List	int_list.h	/^typedef PtrToNode List;$/;"	t
List	list_cursor.h	/^typedef PtrToNode List;$/;"	t
List	void_list.h	/^typedef PtrToNode List;$/;"	t
NewList	void_list.c	/^List NewList(int elemsize,List l)$/;"	f
Next	int_list.h	/^	Position Next;$/;"	m	struct:Node
Next	list_cursor.h	/^	Position Next;$/;"	m	struct:Node
Node	int_list.h	/^struct Node$/;"	s
Node	list_cursor.h	/^struct Node$/;"	s
Node	void_list.h	/^struct Node$/;"	s
OneCore	void_list.c	/^struct OneCore$/;"	s	file:
Position	int_list.h	/^typedef PtrToNode Position;$/;"	t
Position	list_cursor.h	/^typedef PtrToNode Position;$/;"	t
Position	void_list.h	/^typedef PtrToNode Position;$/;"	t
PtrToNode	int_list.h	/^typedef struct Node* PtrToNode;$/;"	t	typeref:struct:Node
PtrToNode	list_cursor.h	/^typedef int PtrToNode;$/;"	t
PtrToNode	void_list.h	/^typedef struct Node* PtrToNode;$/;"	t	typeref:struct:Node
Push	int_list.c	/^void Push(int x,List l)$/;"	f
Push	void_list.c	/^void Push(void* elem,List l)$/;"	f
Q	int_list.vim	/^map Q gq$/;"	m
Reverse	void_list.c	/^List Reverse(List l)$/;"	f
SessionLoad	int_list.vim	/^let SessionLoad = 1$/;"	v
VOID_LIST_H	void_list.h	2;"	d
_Cursor_H	list_cursor.h	2;"	d
element	int_list.h	/^	int element;$/;"	m	struct:Node
elems	void_list.h	/^	void* elems;$/;"	m	struct:Node
elemsize	void_list.h	/^	int elemsize;$/;"	m	struct:Node
first	void_list.h	/^	int first;$/;"	m	struct:Data
gx	int_list.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
main	int_list.c	/^int main()$/;"	f
main	void_list.c	/^int main()$/;"	f
next	void_list.h	/^	Position next;$/;"	m	struct:Node
pData	void_list.c	/^typedef struct Data* pData;$/;"	t	typeref:struct:Data	file:
pOneCore	void_list.c	/^typedef struct OneCore* pOneCore;$/;"	t	typeref:struct:OneCore	file:
s:cpo_save	int_list.vim	/^let s:cpo_save=&cpo$/;"	v
s:so_save	int_list.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	int_list.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	int_list.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
se	void_list.h	/^	double se;$/;"	m	struct:Data
third	void_list.h	/^	long third;$/;"	m	struct:Data
